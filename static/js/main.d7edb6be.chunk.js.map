{"version":3,"sources":["helpers/styledUtils.ts","components/Flex/Flex.tsx","components/Text/Text.tsx","helpers/mathsFunctions.ts","helpers/brokenStyles.ts","components/Input/Input.tsx","components/Button/Button.tsx","components/FormComponents/Form/Form.tsx","pages/Registration/Registration.styled.ts","components/FormComponents/InputGroupItem/InputGroupItem.tsx","components/FormComponents/GroupInputItems/GroupInputItems.tsx","contexts/BreakFormContext/BreakFormContext.ts","components/BreakFormCheckbox/BreakFormCheckbox.tsx","contexts/BreakFormContext/BreakFormContextProvider.tsx","contexts/BreakFormContext/useBreakFormContext.ts","pages/Registration/Registration.tsx","components/Router/useRoutes.ts","components/Router/Router.tsx","App.tsx","index.js"],"names":["shouldForwardProp","propsNames","prop","includes","throwProp","key","props","SFlex","styled","div","withConfig","inline","Flex","children","rest","SText","span","size","lineHeight","color","bold","Text","randomInt","min","max","Math","ceil","floor","random","brokenIndent","isBroken","indent","value","Array","fill","map","join","getIndent","css","SInput","input","Input","SButton","button","deg","Button","textColor","Form","Container","attrs","direction","grow","alignItems","justify","role","Title","as","undefined","scale","skew","FieldsContainer","Field","SubmitButton","SForm","Label","label","InputGroupItem","name","id","htmlFor","type","GroupInputItems","values","vName","Boolean","BreakFormContext","createContext","onChangeIsBroken","BreakFormCheckbox","onClick","BreakContainer","BreakFormContextProvider","useState","setIsBroken","condition","prevState","Provider","useBreakFormContext","useContext","radioGroupValues","brokenRadioGroupValues","item","Registration","onSubmit","e","preventDefault","target","elements","surname","email","password","gender","console","log","placeholder","useRoutes","path","component","Router","routes","GlobalStyle","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7edb6be.chunk.js","sourcesContent":["type propType = any;\r\n\r\nexport const shouldForwardProp =\r\n  (propsNames: propType[]) =>\r\n  (prop: propType): boolean =>\r\n    !propsNames.includes(prop);\r\n\r\nexport const throwProp =\r\n  <P extends object = {}>(key: keyof P) =>\r\n  (props: P) =>\r\n    props[key];\r\n","import React from 'react';\r\nimport { Props, FlexProps } from './interface';\r\nimport styled from 'styled-components';\r\nimport { shouldForwardProp, throwProp } from '@styledUtils';\r\n\r\nconst SFlex = styled.div.withConfig({\r\n  shouldForwardProp: shouldForwardProp([\r\n    'justify',\r\n    'inline',\r\n    'direction',\r\n    'alignItems',\r\n    'grow',\r\n    'wrap'\r\n  ])\r\n})<FlexProps>`\r\n  display: ${({ inline }) => (inline ? 'inline-flex' : 'flex')};\r\n  flex-direction: ${throwProp('direction')};\r\n  align-items: ${throwProp('alignItems')};\r\n  justify-content: ${throwProp('justify')};\r\n  flex-wrap: ${throwProp('wrap')};\r\n  flex-grow: ${throwProp('grow')};\r\n`;\r\n\r\nconst Flex = <P extends React.ElementType = 'div'>({\r\n  children,\r\n  ...rest\r\n}: Props<P>) => <SFlex {...rest}>{children}</SFlex>;\r\n\r\nexport default Flex;\r\n","import React from 'react';\r\nimport { TextProps, Props } from './interface';\r\nimport styled from 'styled-components';\r\nimport { shouldForwardProp } from '@styledUtils';\r\n\r\nconst SText = styled.span.withConfig({\r\n  shouldForwardProp: shouldForwardProp(['color', 'size', 'lineHeight', 'bold'])\r\n})<TextProps>`\r\n  font-size: ${({ size }) => (typeof size === 'number' ? `${size}px` : size)};\r\n  line-height: ${({ lineHeight }) =>\r\n    typeof lineHeight === 'number' ? `${lineHeight}px` : lineHeight};\r\n  color: ${({ color }) => (color === 'inherit' ? 'inherit' : color)};\r\n  font-weight: ${({ bold }) => (bold ? 'bold' : 'normal')};\r\n  font-family: 'Roboto', sans-serif;\r\n`;\r\n\r\nconst Text = <P extends React.ElementType = 'span'>({\r\n  children,\r\n  color = '#000',\r\n  size = 18,\r\n  lineHeight = 'normal',\r\n  ...rest\r\n}: Props<P>) => (\r\n  <SText color={color} size={size} lineHeight={lineHeight} {...rest}>\r\n    {children}\r\n  </SText>\r\n);\r\n\r\nexport default Text;\r\n","export const randomInt = (min: number, max: number) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n","import { css } from 'styled-components';\r\nimport { randomInt } from '@helpers/mathsFunctions';\r\nimport { IsBroken } from '@resources_types/brokenFormTypes';\r\n\r\nconst getIndent = (value = 1) =>\r\n  [...new Array(4)]\r\n    .fill(0)\r\n    .map(() => `${randomInt(0, 30) * value}px`)\r\n    .join(' ');\r\n\r\nexport const brokenIndent = ({ isBroken }: any & IsBroken) => {\r\n  const indent = getIndent();\r\n  return (\r\n    isBroken &&\r\n    css`\r\n      margin: ${indent}!important;\r\n    `\r\n  );\r\n};\r\n\r\nexport const brokenTransformRotate = ({ isBroken }: any & IsBroken) => {\r\n  const deg = randomInt(0, 360);\r\n  return (\r\n    isBroken &&\r\n    css`\r\n      transform: rotate(${deg}deg) !important;\r\n    `\r\n  );\r\n};\r\n\r\nexport const brokenTransformScale = ({ isBroken }: any & IsBroken) => {\r\n  const scale = Math.random() * 1.5 + 1;\r\n  return (\r\n    isBroken &&\r\n    css`\r\n      transform: scale(${scale}) !important;\r\n    `\r\n  );\r\n};\r\nexport const brokenTransformSkew = ({ isBroken }: any & IsBroken) => {\r\n  const skew = randomInt(-20, 30);\r\n  return (\r\n    isBroken &&\r\n    css`\r\n      transform: skew(${skew}deg) !important;\r\n    `\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { IInput } from './interface';\r\nimport styled from 'styled-components';\r\nimport { brokenIndent } from '@helpers/brokenStyles';\r\n\r\nconst SInput = styled.input`\r\n  height: 36px;\r\n  border: 1px solid black;\r\n  border-radius: 4px;\r\n  outline: none;\r\n\r\n  ${brokenIndent};\r\n`;\r\n\r\nconst Input = ({ ...rest }: IInput) => (\r\n  <label>\r\n    <SInput {...rest} />\r\n  </label>\r\n);\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport { IButton, Props } from './interface';\r\nimport styled from 'styled-components';\r\nimport { shouldForwardProp, throwProp } from '@styledUtils';\r\nimport { brokenIndent, brokenTransformRotate } from '@helpers/brokenStyles';\r\n\r\nconst SButton = styled.button.withConfig({\r\n  shouldForwardProp: shouldForwardProp(['color', 'textColor', 'isBroken'])\r\n})<IButton>`\r\n  flex: none;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: ${throwProp('color')};\r\n  color: ${throwProp('textColor')};\r\n  border: none;\r\n  cursor: pointer;\r\n  height: 36px;\r\n  padding: 8px 16px;\r\n  font-size: 14px;\r\n\r\n  &:hover {\r\n    opacity: 0.95;\r\n  }\r\n  &:active {\r\n    opacity: 0.7;\r\n  }\r\n  transition: opacity ease-in 100ms;\r\n\r\n  ${brokenIndent};\r\n  ${brokenTransformRotate}\r\n`;\r\n\r\nconst Button = <P extends React.ElementType = 'button'>({\r\n  children,\r\n  color = '#2F7FCF',\r\n  textColor = '#fff',\r\n  isBroken,\r\n  ...rest\r\n}: Props<P>) => (\r\n  <SButton color={color} textColor={textColor} {...rest} isBroken={isBroken}>\r\n    {children}\r\n  </SButton>\r\n);\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport { Props } from './interface';\r\n\r\nconst Form = <P extends React.ElementType = 'form'>({\r\n  children,\r\n  ...rest\r\n}: Props<P>) => {\r\n  return <form {...rest}>{children}</form>;\r\n};\r\n\r\nexport default Form;\r\n","import styled from 'styled-components';\r\nimport Flex from '@components/Flex';\r\nimport Text from '@components/Text';\r\nimport Input from '@components/Input';\r\nimport Button from '@components/Button';\r\nimport Form from '@components/FormComponents/Form';\r\nimport {\r\n  brokenTransformScale,\r\n  brokenTransformSkew\r\n} from '@helpers/brokenStyles';\r\nimport { shouldForwardProp } from '@styledUtils';\r\nimport { IsBroken } from '@resources_types/brokenFormTypes';\r\n\r\nexport const Container = styled(Flex).attrs(() => ({\r\n  direction: 'column',\r\n  grow: 1,\r\n  alignItems: 'center',\r\n  justify: 'center',\r\n  role: 'header' // семантика\r\n}))`\r\n  width: 100%;\r\n  height: 100vh;\r\n`;\r\n\r\nexport const Title = styled(Text)\r\n  .withConfig({ shouldForwardProp: shouldForwardProp(['isBroken']) })\r\n  .attrs(({ isBroken }: IsBroken) => ({\r\n    size: 20,\r\n    role: 'h6',\r\n    as: isBroken ? 'table' : undefined\r\n  }))<IsBroken>`\r\n  ${brokenTransformScale};\r\n  ${brokenTransformSkew};\r\n`;\r\n\r\nexport const FieldsContainer = styled(Flex).attrs(() => ({\r\n  direction: 'column',\r\n  justify: 'center'\r\n}))``;\r\n\r\nexport const Field = styled(Input)`\r\n  margin: 10px 0 0;\r\n`;\r\n\r\nexport const SubmitButton = styled(Button)`\r\n  margin: 10px;\r\n`;\r\n\r\nexport const SForm = styled(Form)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`;\r\n","import React from 'react';\r\nimport { Props } from './interface';\r\nimport styled from 'styled-components';\r\nimport { shouldForwardProp } from '@styledUtils';\r\nimport { IsBroken } from '@resources_types/brokenFormTypes';\r\nimport { brokenIndent } from '@helpers/brokenStyles';\r\n\r\nconst Label = styled.label`\r\n  height: 36px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  color: black;\r\n  font-family: 'Roboto', sans-serif;\r\n`;\r\n\r\nconst Input = styled.input.withConfig<IsBroken>({\r\n  shouldForwardProp: shouldForwardProp(['isBroken'])\r\n})`\r\n  margin: 5px;\r\n  ${brokenIndent};\r\n`;\r\n\r\nconst InputGroupItem = <P extends React.ElementType = 'input'>({\r\n  value,\r\n  label,\r\n  name,\r\n  id,\r\n  isBroken,\r\n  ...rest\r\n}: Props<P>) => {\r\n  return (\r\n    <Label htmlFor={id}>\r\n      <Input\r\n        type='radio'\r\n        value={value}\r\n        name={name}\r\n        id={id}\r\n        {...rest}\r\n        isBroken={isBroken}\r\n      />\r\n      {label}\r\n    </Label>\r\n  );\r\n};\r\n\r\nexport default InputGroupItem;\r\n","import React from 'react';\r\nimport { IGroupInputItems } from './interface';\r\nimport styled from 'styled-components';\r\nimport Flex from '@components/Flex';\r\nimport InputGroupItem from '@components/FormComponents/InputGroupItem';\r\n\r\nconst Container = styled(Flex).attrs(() => ({ direction: 'column' }))``;\r\n\r\nconst GroupInputItems = ({\r\n  name,\r\n  values,\r\n  type,\r\n  isBroken\r\n}: IGroupInputItems) => {\r\n  return (\r\n    <Container>\r\n      {values.map(({ label, value, name: vName = name, id, ...rest }) => (\r\n        <InputGroupItem\r\n          isBroken={Boolean(isBroken)}\r\n          label={label}\r\n          /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\r\n          name={vName!}\r\n          value={value}\r\n          key={id}\r\n          id={id}\r\n          type={type}\r\n          {...rest}\r\n        />\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default GroupInputItems;\r\n","import { createContext } from 'react';\r\n\r\nexport interface IBreakFormContext {\r\n  isBroken: boolean;\r\n  onChangeIsBroken: (condition?: boolean) => void;\r\n}\r\n\r\nconst BreakFormContext = createContext<IBreakFormContext>({\r\n  isBroken: true,\r\n  onChangeIsBroken: () => null\r\n});\r\n\r\nexport default BreakFormContext;\r\n","import React from 'react';\r\nimport { IBreakFormCheckbox } from './interface';\r\nimport Button from '@components/Button';\r\n\r\nconst BreakFormCheckbox = ({\r\n  isBroken,\r\n  onChangeIsBroken\r\n}: IBreakFormCheckbox) => {\r\n  return (\r\n    <Button\r\n      isBroken={false}\r\n      onClick={() => {\r\n        onChangeIsBroken();\r\n      }}\r\n      color={!isBroken ? '#EB5757' : '#219653'}\r\n    >\r\n      {!isBroken ? 'Сломать' : 'Починить'}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default BreakFormCheckbox;\r\n","import React, { ReactNode, useState } from 'react';\r\nimport BreakFormContext from './BreakFormContext';\r\nimport Flex from '@components/Flex';\r\nimport BreakFormCheckbox from '@components/BreakFormCheckbox';\r\nimport styled from 'styled-components';\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n}\r\n\r\nconst BreakContainer = styled.div`\r\n  position: absolute;\r\n  height: 36px;\r\n  z-index: 10;\r\n`;\r\n\r\nconst BreakFormContextProvider = ({ children }: Props) => {\r\n  const [isBroken, setIsBroken] = useState(true);\r\n\r\n  const onChangeIsBroken = (condition?: boolean) => {\r\n    if (condition !== undefined) {\r\n      setIsBroken(condition);\r\n    } else {\r\n      setIsBroken(prevState => !prevState);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BreakFormContext.Provider value={{ isBroken, onChangeIsBroken }}>\r\n      <Flex direction='column'>\r\n        <BreakContainer>\r\n          <BreakFormCheckbox\r\n            isBroken={isBroken}\r\n            onChangeIsBroken={onChangeIsBroken}\r\n          />\r\n        </BreakContainer>\r\n        {children}\r\n      </Flex>\r\n    </BreakFormContext.Provider>\r\n  );\r\n};\r\n\r\nexport default BreakFormContextProvider;\r\n","import { useContext } from 'react';\r\nimport BreakFormContext from './BreakFormContext';\r\n\r\nconst useBreakFormContext = () => {\r\n  return useContext(BreakFormContext);\r\n};\r\n\r\nexport default useBreakFormContext;\r\n","import React from 'react';\r\nimport {\r\n  Container,\r\n  Title,\r\n  FieldsContainer,\r\n  Field,\r\n  SubmitButton,\r\n  SForm\r\n} from './Registration.styled';\r\nimport GroupInputItems from '@components/FormComponents/GroupInputItems';\r\nimport { InputGroupItemValue } from '@components/FormComponents/GroupInputItems/interface';\r\nimport useBreakFormContext from '@contexts/BreakFormContext';\r\n\r\nconst radioGroupValues: InputGroupItemValue[] = [\r\n  { id: 'male', value: 'male', label: 'male' },\r\n  { id: 'female', value: 'female', label: 'female' }\r\n];\r\n\r\nconst brokenRadioGroupValues: InputGroupItemValue[] = radioGroupValues.map(\r\n  item => ({ ...item, name: 'gender' })\r\n);\r\n\r\nconst Registration = () => {\r\n  const { isBroken } = useBreakFormContext();\r\n  const fields = [\r\n    { key: 'name', placeholder: 'Имя' },\r\n    { key: 'surname', placeholder: 'Фамилия' },\r\n    { key: 'email', placeholder: 'E-mail' },\r\n    { key: 'password', placeholder: 'пароль', type: 'password' }\r\n  ];\r\n\r\n  const onSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    const { name, surname, email, password, gender } = e.target.elements;\r\n    console.log({\r\n      name: name.value,\r\n      surname: surname.value,\r\n      email: email.value,\r\n      password: password.value,\r\n      gender: gender.value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Title isBroken={isBroken}>Страница регистрации</Title>\r\n      <SForm onSubmit={onSubmit}>\r\n        <FieldsContainer>\r\n          {fields.map(({ key, placeholder, type = 'text' }) => (\r\n            <Field\r\n              key={key}\r\n              name={key}\r\n              type={type}\r\n              placeholder={placeholder}\r\n              isBroken={isBroken}\r\n            />\r\n          ))}\r\n        </FieldsContainer>\r\n        <GroupInputItems\r\n          name='gender'\r\n          values={isBroken ? brokenRadioGroupValues : radioGroupValues}\r\n          type={isBroken ? 'checkbox' : 'radio'}\r\n          isBroken={isBroken}\r\n        />\r\n        <SubmitButton type='submit' isBroken={isBroken}>\r\n          Отправить\r\n        </SubmitButton>\r\n      </SForm>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Registration;\r\n","import Registration from '@pages/Registration';\r\n\r\nconst useRoutes = () => {\r\n  return [{ path: '*', component: Registration }];\r\n};\r\n\r\nexport default useRoutes;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport useRoutes from './useRoutes';\r\n\r\nconst Router = () => {\r\n  const routes = useRoutes();\r\n  return (\r\n    <BrowserRouter>\r\n      {routes.map(({ path, component }) => (\r\n        <Route key={path} component={component} />\r\n      ))}\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import React from 'react';\r\nimport Router from './components/Router';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport { BreakFormContextProvider } from '@contexts/BreakFormContext';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst App = () => {\r\n  return (\r\n    <BreakFormContextProvider>\r\n      <Router />\r\n      <GlobalStyle />\r\n    </BreakFormContextProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}